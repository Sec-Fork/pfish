// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.23.4
// source: fish.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Fish_SendMessage_FullMethodName = "/api.Fish/SendMessage"
	Fish_Heartbeat_FullMethodName   = "/api.Fish/Heartbeat"
)

// FishClient is the client API for Fish service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FishClient interface {
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageReply, error)
	Heartbeat(ctx context.Context, opts ...grpc.CallOption) (Fish_HeartbeatClient, error)
}

type fishClient struct {
	cc grpc.ClientConnInterface
}

func NewFishClient(cc grpc.ClientConnInterface) FishClient {
	return &fishClient{cc}
}

func (c *fishClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessageReply)
	err := c.cc.Invoke(ctx, Fish_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fishClient) Heartbeat(ctx context.Context, opts ...grpc.CallOption) (Fish_HeartbeatClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Fish_ServiceDesc.Streams[0], Fish_Heartbeat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &fishHeartbeatClient{ClientStream: stream}
	return x, nil
}

type Fish_HeartbeatClient interface {
	Send(*HeartbeatRequest) error
	Recv() (*HeartbeatReply, error)
	grpc.ClientStream
}

type fishHeartbeatClient struct {
	grpc.ClientStream
}

func (x *fishHeartbeatClient) Send(m *HeartbeatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fishHeartbeatClient) Recv() (*HeartbeatReply, error) {
	m := new(HeartbeatReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FishServer is the server API for Fish service.
// All implementations must embed UnimplementedFishServer
// for forward compatibility
type FishServer interface {
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageReply, error)
	Heartbeat(Fish_HeartbeatServer) error
	mustEmbedUnimplementedFishServer()
}

// UnimplementedFishServer must be embedded to have forward compatible implementations.
type UnimplementedFishServer struct {
}

func (UnimplementedFishServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedFishServer) Heartbeat(Fish_HeartbeatServer) error {
	return status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedFishServer) mustEmbedUnimplementedFishServer() {}

// UnsafeFishServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FishServer will
// result in compilation errors.
type UnsafeFishServer interface {
	mustEmbedUnimplementedFishServer()
}

func RegisterFishServer(s grpc.ServiceRegistrar, srv FishServer) {
	s.RegisterService(&Fish_ServiceDesc, srv)
}

func _Fish_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FishServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fish_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FishServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fish_Heartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FishServer).Heartbeat(&fishHeartbeatServer{ServerStream: stream})
}

type Fish_HeartbeatServer interface {
	Send(*HeartbeatReply) error
	Recv() (*HeartbeatRequest, error)
	grpc.ServerStream
}

type fishHeartbeatServer struct {
	grpc.ServerStream
}

func (x *fishHeartbeatServer) Send(m *HeartbeatReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fishHeartbeatServer) Recv() (*HeartbeatRequest, error) {
	m := new(HeartbeatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Fish_ServiceDesc is the grpc.ServiceDesc for Fish service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fish_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Fish",
	HandlerType: (*FishServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _Fish_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Heartbeat",
			Handler:       _Fish_Heartbeat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "fish.proto",
}
